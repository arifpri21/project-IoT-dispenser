// Code generated by Arduino IoT Cloud, DO NOT EDIT.

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

// Informasi autentikasi perangkat
const char DEVICE_LOGIN_NAME[] = "14eb5f06-7e44-40d0-bae3-347964ea515d";
const char SSID[]              = "Mi-fi";        // SSID Wi-Fi dari secrets tab
const char PASS[]              = "Nita1999"; // Password Wi-Fi dari secrets tab
const char DEVICE_KEY[]        = "?#dgCPd7#JjQ3z!#!g0vveWYY";  // Secret device key dari secrets tab

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);

// Definisi Pin
#define trigPin 5    // Ultrasonik untuk gelas (D1 - GPIO 5)
#define echoPin 4    // (D2 - GPIO 4)
#define trigPin2 0   // Ultrasonik untuk galon (D3 - GPIO 0)
#define echoPin2 2   // (D4 - GPIO 2)
#define relayPin 14  // Relay untuk pompa (D5 - GPIO 14)
#define ledPin 12    // LED indikator (D6 - GPIO 12)

// Variabel global untuk IoT Cloud
float tinggiAir; 
float volume;

// Variabel lokal
long duration, duration2;
float jarak;

float tinggiWadah = 15.25; // Tinggi wadah (cm)
float luasAlaswadah = 113; // Luas alas wadah (cmÂ²)
const int jarakGelas = 5; // Jarak untuk deteksi gelas (cm)

// Inisialisasi properti di Arduino IoT Cloud
void initProperties() {
  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(tinggiAir, READ, ON_CHANGE, NULL);
  ArduinoCloud.addProperty(volume, READ, ON_CHANGE, NULL);
}

// Fungsi setup
void setup() {
  Serial.begin(115200);
  
  // Konfigurasi pin
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  pinMode(relayPin, OUTPUT);
  pinMode(ledPin, OUTPUT);

  digitalWrite(relayPin, HIGH); // Relay mati awalnya
  digitalWrite(ledPin, LOW);    // LED mati awalnya

  // Inisialisasi koneksi ke Arduino IoT Cloud
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
}

// Fungsi loop utama
void loop() {
  ArduinoCloud.update(); // Memperbarui data ke IoT Cloud
  checkGlassAndWater();  // Memeriksa keberadaan gelas dan level air
  delay(300);
}

// Fungsi untuk mengukur jarak menggunakan sensor ultrasonik
long measureDistance(int trigPinLocal, int echoPinLocal) {
  digitalWrite(trigPinLocal, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPinLocal, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinLocal, LOW);

  long duration = pulseIn(echoPinLocal, HIGH);
  long distance = duration * 0.034 / 2; // Konversi ke cm
  return distance;
}

// Fungsi untuk memeriksa keberadaan gelas dan air galon
void checkGlassAndWater() {
  // Mengukur jarak untuk gelas
  long jarakGelasDetected = measureDistance(trigPin, echoPin);

  Serial.print("Jarak gelas: ");
  Serial.print(jarakGelasDetected);
  Serial.println(" cm");

  if (jarakGelasDetected <= jarakGelas) {
    Serial.println("Gelas terdeteksi, menyalakan relay...");
    digitalWrite(relayPin, LOW); // Relay aktif (pompa hidup)
    digitalWrite(ledPin, HIGH);  // LED menyala
  } else {
    Serial.println("Tidak ada gelas, mematikan relay...");
    digitalWrite(relayPin, HIGH); // Relay mati (pompa mati)
    digitalWrite(ledPin, LOW);    // LED mati
  }

  // Mengukur jarak untuk galon
  duration2 = measureDistance(trigPin2, echoPin2);
  jarak = duration2;

  // Menghitung tinggi air dan volume
  tinggiAir = tinggiWadah - jarak;
  volume = tinggiAir * luasAlaswadah;

  // Menampilkan data di Serial Monitor
  Serial.print("Tinggi Air: ");
  Serial.println(tinggiAir);
  Serial.print("Volume: ");
  Serial.println(volume);
}
